<?php
/**
 * Test class for phpMorphy_UserDict_GrammarIdentifier.
 * Generated by PHPUnit on 2010-11-30 at 04:59:58.
 */
class phpMorphy_UserDict_GrammarIdentifierTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var phpMorphy_UserDict_GrammarIdentifier
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new phpMorphy_UserDict_GrammarIdentifier(
            'PART_OF_SPEECH',
            array('a', 'b', 'c')
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testConstructFromPosAndGrammems().
     */
    public function testConstructFromPosAndGrammems()
    {
        $this->assertEquals(
            $this->object,
            phpMorphy_UserDict_GrammarIdentifier::constructFromPosAndGrammems('PART_OF_SPEECH', "a , \t\t b\t\t , \t c   ")
        );

        $obj3 = phpMorphy_UserDict_GrammarIdentifier::constructFromPosAndGrammems("*     \t\t\t", '');
        $this->assertFalse($obj3->hasPartOfSpeech());
        $this->assertEquals(array(), $obj3->getGrammems());
    }

    /**
     * @todo Implement testConstructFromString().
     */
    public function testConstructFromString()
    {
        $this->assertEquals(
            $this->object,
            phpMorphy_UserDict_GrammarIdentifier::constructFromString("PART_OF_SPEECH    \t\t\t a , \t\t b\t\t , \t c   ")
        );

        $obj2 = phpMorphy_UserDict_GrammarIdentifier::constructFromString("TEST     \t\t\t");
        $this->assertEquals('TEST', $obj2->getPartOfSpeech());
        $this->assertEquals(array(), $obj2->getGrammems());

        $obj3 = phpMorphy_UserDict_GrammarIdentifier::constructFromString("*     \t\t\t");
        $this->assertFalse($obj3->hasPartOfSpeech());
        $this->assertEquals(array(), $obj3->getGrammems());
    }

    /**
     * @todo Implement testHasPartOfSpeech().
     */
    public function testHasPartOfSpeech()
    {
        $one = new phpMorphy_UserDict_GrammarIdentifier('pos', array());
        $two = new phpMorphy_UserDict_GrammarIdentifier(null, array());

        $this->assertTrue($one->hasPartOfSpeech());
        $this->assertFalse($two->hasPartOfSpeech());
    }

    /**
     * @todo Implement testGetPartOfSpeech().
     */
    public function testGetPartOfSpeech()
    {
        $this->assertEquals(
            'PART_OF_SPEECH',
            $this->object->getPartOfSpeech()
        );
    }

    /**
     * @todo Implement testGetGrammems().
     */
    public function testGetGrammems()
    {
        $this->assertEquals(
            array('a', 'b', 'c'),
            $this->object->getGrammems()
        );
    }

    /**
     * @todo Implement testMatch().
     */
    public function testMatch()
    {
        $obj = $this->object;
        $obj2 = new phpMorphy_UserDict_GrammarIdentifier(null, array('a', 'b', 'c'));

        $this->assertTrue($obj->match('PART_OF_SPEECH', array('c', 'b', 'a')));
        $this->assertFalse($obj->match('PART_OF_SPEECH_BOO', array('c', 'b', 'a')));
        $this->assertTrue($obj->match('PART_OF_SPEECH', array('d', 'c', 'b', 'a')));
        $this->assertFalse($obj->match('PART_OF_SPEECH', array('a', 'b')));
        $this->assertFalse($obj->match('PART_OF_SPEECH', array('a', 'b', 'd')));

        $this->assertTrue($obj2->match('ANY_STRING', array('c', 'b', 'a')));
        $this->assertFalse($obj2->match('ANY_STRING_ANY', array('c', 'b')));

        $obj3 = new phpMorphy_UserDict_GrammarIdentifier(null, array());

        $this->assertTrue($obj3->match('ANY_STRING', array('any_array', 'a', '1', 'd', 'z', 'x')));
        $this->assertTrue($obj3->match('ANY_STRING', array()));
        $this->assertTrue($obj3->match(null, array()));
    }
}
?>
